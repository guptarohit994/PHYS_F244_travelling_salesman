taskID:0, Dataset file_name: ./datasets/custom_11_d.txt
taskID:0, numCities: 11
taskID:0, Number of processors available = 24
taskID:0, Number of threads =              10
printAdjacencyMatrix: printing Matrix
	 0.00	 29.00	 20.00	 21.00	 16.00	 31.00	 100.00	 12.00	 4.00	 31.00	 18.00
	 29.00	 0.00	 15.00	 29.00	 28.00	 40.00	 72.00	 21.00	 29.00	 41.00	 12.00
	 20.00	 15.00	 0.00	 15.00	 14.00	 25.00	 81.00	 9.00	 23.00	 27.00	 13.00
	 21.00	 29.00	 15.00	 0.00	 4.00	 12.00	 92.00	 12.00	 25.00	 13.00	 25.00
	 16.00	 28.00	 14.00	 4.00	 0.00	 16.00	 94.00	 9.00	 20.00	 16.00	 22.00
	 31.00	 40.00	 25.00	 12.00	 16.00	 0.00	 95.00	 24.00	 36.00	 3.00	 37.00
	 100.00	 72.00	 81.00	 92.00	 94.00	 95.00	 0.00	 90.00	 101.00	 99.00	 84.00
	 12.00	 21.00	 9.00	 12.00	 9.00	 24.00	 90.00	 0.00	 15.00	 25.00	 13.00
	 4.00	 29.00	 23.00	 25.00	 20.00	 36.00	 101.00	 15.00	 0.00	 35.00	 18.00
	 31.00	 41.00	 27.00	 13.00	 16.00	 3.00	 99.00	 25.00	 35.00	 0.00	 38.00
	 18.00	 12.00	 13.00	 25.00	 22.00	 37.00	 84.00	 13.00	 18.00	 38.00	 0.00

taskID:0, totalNumThreads:10, numStartingThreads:10, numInitialPaths:10, pathsPerThread:1
get_my_share: Starting from threadID = 0
get_my_share: threadID:numPathsAvailable = 0:10
get_my_share: threadID:pathsPerThread = 0:1
get_my_share: threadID:pathsAllocated = 0:1
get_my_share: Ending from threadID = 0
printPath: Printing path =>
 0(0.00) -> 1(29.00) -> 2(44.00) -> 3(59.00) -> 4(63.00) -> 5(79.00) -> 6(174.00) -> 7(264.00) -> 8(279.00) -> 9(314.00) -> 10(352.00) -> 0(370.00)
printPath: Done
get_my_share: Starting from threadID = 8
get_my_share: threadID:numPathsAvailable = 8:9
get_my_share: threadID:pathsPerThread = 8:1
get_my_share: threadID:pathsAllocated = 8:1
get_my_share: Ending from threadID = 8
get_my_share: Starting from threadID = 3
get_my_share: threadID:numPathsAvailable = 3:8
get_my_share: threadID:pathsPerThread = 3:1
get_my_share: threadID:pathsAllocated = 3:1
get_my_share: Ending from threadID = 3
get_my_share: Starting from threadID = 1
get_my_share: threadID:numPathsAvailable = 1:7
get_my_share: threadID:pathsPerThread = 1:1
get_my_share: threadID:pathsAllocated = 1:1
get_my_share: Ending from threadID = 1
get_my_share: Starting from threadID = 2
get_my_share: threadID:numPathsAvailable = 2:6
get_my_share: threadID:pathsPerThread = 2:1
get_my_share: threadID:pathsAllocated = 2:1
get_my_share: Ending from threadID = 2
get_my_share: Starting from threadID = 4
get_my_share: threadID:numPathsAvailable = 4:5
get_my_share: threadID:pathsPerThread = 4:1
get_my_share: threadID:pathsAllocated = 4:1
get_my_share: Ending from threadID = 4
get_my_share: Starting from threadID = 6
get_my_share: threadID:numPathsAvailable = 6:4
get_my_share: threadID:pathsPerThread = 6:1
get_my_share: threadID:pathsAllocated = 6:1
get_my_share: Ending from threadID = 6
get_my_share: Starting from threadID = 5
get_my_share: threadID:numPathsAvailable = 5:3
get_my_share: threadID:pathsPerThread = 5:1
get_my_share: threadID:pathsAllocated = 5:1
get_my_share: Ending from threadID = 5
get_my_share: Starting from threadID = 7
get_my_share: threadID:numPathsAvailable = 7:2
get_my_share: threadID:pathsPerThread = 7:1
get_my_share: threadID:pathsAllocated = 7:1
get_my_share: Ending from threadID = 7
printPath: Printing path =>
 0(0.00) -> 2(20.00) -> 1(35.00) -> 3(64.00) -> 4(68.00) -> 5(84.00) -> 6(179.00) -> 7(269.00) -> 9(294.00) -> 8(329.00) -> 10(347.00) -> 0(365.00)printPath: Printing path =>

printPath: Done
printPath: Printing path =>
 0(0.00) -> 3(21.00) -> 1(50.00) -> 2(65.00) -> 4(79.00) -> 5(95.00)get_my_share: Starting from threadID = 9
 -> 6(190.00) 0(0.00) -> 1(29.00) -> 2(44.00) ->get_my_share: threadID:numPathsAvailable = 9:1
 3(59.00) -> 4(63.00)get_my_share: threadID:pathsPerThread = 9:1
 -> 9(289.00) -> 5(79.00) -> 6(174.00)get_my_share: threadID:pathsAllocated = 9:1
 -> 7(264.00) -> 9(289.00) -> 7(314.00) -> -> 8(324.00) -> 10(342.00) -> 0(360.00)
printPath: Done
get_my_share: Ending from threadID = 9
 10(327.00)printPath: Printing path =>
 -> 8(345.00)printPath: Printing path =>
 -> 0(349.00)
printPath: Done
 0(0.00) -> 6(100.00) -> 1(172.00) -> 2(187.00) ->printPath: Printing path =>
 3(202.00) 0(0.00) 0(0.00) -> 4(16.00) -> 7(12.00) -> 1(33.00)printPath: Printing path =>
 0(0.00) -> 8(4.00) -> 1(33.00) -> 2(48.00) -> 3(63.00) -> -> 4(67.00) -> -> 5(83.00) 2(48.00) 1(44.00) -> -> 4(206.00) -> -> 5(222.00) 6(178.00) 2(59.00) -> 9(277.00) -> -> 3(74.00) -> 5(86.00) -> 6(181.00) -> 9(280.00) -> 7(305.00) -> -> 7(302.00) 10(318.00) -> 8(336.00) -> 0(340.00) ->
printPath: Done
 7(246.00) -> -> 9(271.00) -> 10(309.00) -> 8(327.00) -> 10(315.00) -> 0(333.00) 3(63.00) -> 4(67.00) 0(331.00)
 ->printPath: Done
 5(83.00) -> 9(86.00) -> 6(185.00) -> 8(286.00) -> 10(304.00) -> 0(322.00)
printPath: Done

printPath: Done
printPath: Printing path =>
 0(0.00) -> 7(12.00) -> 1(33.00) -> 2(48.00) -> 3(63.00) -> 4(67.00) -> 5(83.00) -> 9(86.00) -> 6(185.00) -> 10(269.00) -> 8(287.00) -> 0(291.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 6(100.00) -> 1(172.00) -> 2(187.00) -> 3(202.00) -> 4(206.00) -> 5(222.00) -> 9(225.00) -> 7(250.00) -> 10(263.00) -> 8(281.00) -> 0(285.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 6(100.00) -> 1(172.00) -> 2(187.00) -> 3(202.00) -> 4(206.00) -> 9(222.00) -> 5(225.00) -> 7(249.00) -> 10(262.00) -> 8(280.00) -> 0(284.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 6(100.00) -> 1(172.00) -> 2(187.00) -> 3(202.00) -> 5(214.00) -> 9(217.00) -> 4(233.00) -> 7(242.00) -> 10(255.00) -> 8(273.00) -> 0(277.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 6(100.00) -> 1(172.00) -> 2(187.00) -> 5(212.00) -> 9(215.00) -> 3(228.00) -> 4(232.00) -> 7(241.00) -> 10(254.00) -> 8(272.00) -> 0(276.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 10(18.00) -> 1(30.00) -> 2(45.00) -> 6(126.00) -> 5(221.00) -> 9(224.00) -> 3(237.00) -> 4(241.00) -> 7(250.00) -> 8(265.00) -> 0(269.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 2(20.00) -> 1(35.00) -> 6(107.00) -> 5(202.00) -> 9(205.00) -> 3(218.00) -> 4(222.00) -> 7(231.00) -> 10(244.00) -> 8(262.00) -> 0(266.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 10(18.00) -> 1(30.00) -> 6(102.00) -> 2(183.00) -> 3(198.00) -> 4(202.00) -> 5(218.00) -> 9(221.00) -> 7(246.00) -> 8(261.00) -> 0(265.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 10(18.00) -> 1(30.00) -> 6(102.00) -> 2(183.00) -> 3(198.00) -> 4(202.00) -> 9(218.00) -> 5(221.00) -> 7(245.00) -> 8(260.00) -> 0(264.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 10(18.00) -> 1(30.00) -> 6(102.00) -> 2(183.00) -> 3(198.00) -> 5(210.00) -> 9(213.00) -> 4(229.00) -> 7(238.00) -> 8(253.00) -> 0(257.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 10(18.00) -> 1(30.00) -> 6(102.00) -> 2(183.00) -> 5(208.00) -> 9(211.00) -> 3(224.00) -> 4(228.00) -> 7(237.00) -> 8(252.00) -> 0(256.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 7(12.00) -> 4(21.00) -> 3(25.00) -> 5(37.00) -> 9(40.00) -> 2(67.00) -> 6(148.00) -> 1(220.00) -> 10(232.00) -> 8(250.00) -> 0(254.00)
printPath: Done
printPath: Printing path =>
 0(0.00) -> 7(12.00) -> 4(21.00) -> 3(25.00) -> 9(38.00) -> 5(41.00) -> 2(66.00) -> 6(147.00) -> 1(219.00) -> 10(231.00) -> 8(249.00) -> 0(253.00)
printPath: Done
taskID:0, Evaluated a total of 69886 feasible complete paths.



=====================================
Lowest Cost:253.00
Wallclock time = 2.435317

Took 22.4000000000 seconds to execute
